/*
 * main.c
 *
 *  Created on: Jan 22, 2015
 *      Author: sveigri
 */


#include<stdio.h>
#include <sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
//#include<error.h>





/*socket(domain, type, protocol)
 * domain, or address family —
    communication domain in which the socket should be created. Some of address families are AF_INET (IP), AF_INET6 (IPv6), AF_UNIX (local channel, similar to pipes), AF_ISO (ISO protocols), and AF_NS (Xerox Network Systems protocols).
type —
    type of service. This is selected according to the properties required by the application: SOCK_STREAM (virtual circuit service), SOCK_DGRAM (datagram service), SOCK_RAW (direct IP service). Check with your address family to see whether a particular service is available.
protocol —
    indicate a specific protocol to use in supporting the sockets operation. This is useful in cases where some families may have more than one protocol to support a given type of service. The return value is a file descriptor (a small integer). The analogy of creating a socket is that of requesting a telephone line from the phone company. */
int CreateSocket(int *fd)
{

	if((*fd=socket(AF_INET,SOCK_DGRAM,0)) < 0)
	{
		perror("Thread creation: " );
		return 0;
	}
	else
	{
		return -1;
	}
}


int main()
{
	/*Create client*/
	int fd;
	printf("%d\n",CreateSocket(&fd));

	struct sockaddr_in clientAddr;
	 /* bind to an arbitrary return address */
	/* because this is the client side, we don't care about the address */
	/* since no application will initiate communication here - it will */
	/* just send responses */ /* INADDR_ANY is the IP address and 0 is the socket */
	/* htonl converts a long integer (e.g. address) to a network representation */
	/* htons converts a short integer (e.g. port) to a network representation */
	clientAddr.sin_family = AF_INET;
	clientAddr.sin_port = htons(0); //system picks port number
	clientAddr.sin_addr.s_addr = htonl(INADDR_ANY); //system picks IP addr
	memset((char*)&clientAddr,0,sizeof(clientAddr));


	if(bind(fd,(struct sockaddr *)&clientAddr,sizeof(clientAddr)))
	{
		perror("Bind socket: ");
		return -1;
	}
	/*END Create client*/

	/*Create Server*/

	/*END Create Server*/



	return 0;
}
