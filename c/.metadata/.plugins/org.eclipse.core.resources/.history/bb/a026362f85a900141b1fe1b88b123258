/*
 * udp-send.c
 *
 *  Created on: Jan 28, 2015
 *      Author: strogos
 */
#define PORT 20001
#define BUFSIZE 2048
#define BROADCAST "129.241.187.255"
//#define SERVER ""
#define BROADCAST_ON 1
#define HOST 129.241.187.136"//"129.241.187.255"//"10.0.0.5"// "78.91.48.183"//"itk-d666-ubuntu"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <netdb.h>
#include <sys/socket.h>
#include "port.h"

#define BUFLEN 2048
#define MSGS 5	/* number of messages to send */

void printIP(struct hostent *hp)
{
	int i;
	unsigned char* a;
	for (i=0; hp->h_addr_list[i] != 0; i++)
	{
		a=(unsigned char*) hp->h_addr_list[i];
		printf("%d.%d.%d.%d\n", a[0], a[1], a[2], a[3]);
	}
}



int main(int argc, char *argv[])
{

	int fd; 	//socket for sending
	//int fd_receive; //socket for receiving
	struct hostent *hp; //host info
	struct sockaddr_in clientAddr; //client address info
	struct sockaddr_in serverAddr; //server address info



	if((fd=socket(AF_INET,SOCK_DGRAM,0)) < 0)
	{
		perror("Thread creation: " );
		return -1;
	}

	int on=1;
	if(setsockopt(fd,SOL_SOCKET,SO_REUSEADDR,&on,sizeof(int)))
	{
		perror("Create socket :");
		return -1;
	}
	if (BROADCAST_ON)
	{
		if (setsockopt(fd,SOL_SOCKET,SO_BROADCAST,&on,sizeof(int)))
		{
			perror("Create socket :");
			return -1;
		}

	}

	memset((char*)&clientAddr,0,sizeof(clientAddr));
	clientAddr.sin_family = AF_INET;
	clientAddr.sin_port = htons(PORT);//htons(0); //system picks port number
	clientAddr.sin_addr.s_addr = htonl(INADDR_ANY); //system picks IP addr

	if(bind(fd,(struct sockaddr *)&clientAddr,sizeof(clientAddr)))
	{
		perror("Bind socket: ");
		return -1;
	}

	/*fill server address*/
	memset((char *) &serverAddr, 0, sizeof(serverAddr));
	serverAddr.sin_family = AF_INET;
	serverAddr.sin_port = htons(PORT);
	hp=gethostbyname((char*)HOST);
	if (!hp)
	{
		fprintf(stderr, "could not find the IP to host %s\n", (char*)HOST);
		return -1;
	}


	/*put host IP into the server address structure serverAddr*/
	memcpy((void*)&serverAddr.sin_addr,hp->h_addr_list[0],hp->h_length);
	printIP(hp);

	/*send msg to server*/
	char *my_msg="FUCK A SHY LAPPLANDER!";
	if(sendto(fd,my_msg,strlen(my_msg),0,(struct sockaddr*)&serverAddr,sizeof(serverAddr)) < 0)
	{
		perror("msg send to server error");
		return -1;
	}

	printf("sent msg: %s\n",my_msg);
	return 0;
}
