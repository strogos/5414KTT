/*
 * main.c
 *
 *  Created on: Jan 22, 2015
 *      Author: sveigri
 */

#define PORT 1153
#define BUFSIZE 2048
#define HOST "itk-d666-ubuntu"
//#define

#include<stdio.h>
#include <sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
//#include<error.h>
#include <netdb.h>
#include <string.h> /* for memcpy */

void paddr(unsigned char *a)
{
	printf("%d.%d.%d.%d\n", a[0], a[1], a[2], a[3]);
}


/*socket(domain, type, protocol)
 * domain, or address family —
    communication domain in which the socket should be created. Some of address families are AF_INET (IP), AF_INET6 (IPv6), AF_UNIX (local channel, similar to pipes), AF_ISO (ISO protocols), and AF_NS (Xerox Network Systems protocols).
type —
    type of service. This is selected according to the properties required by the application: SOCK_STREAM (virtual circuit service), SOCK_DGRAM (datagram service), SOCK_RAW (direct IP service). Check with your address family to see whether a particular service is available.
protocol —
    indicate a specific protocol to use in supporting the sockets operation. This is useful in cases where some families may have more than one protocol to support a given type of service. The return value is a file descriptor (a small integer). The analogy of creating a socket is that of requesting a telephone line from the phone company. */
int CreateSocket(int *fd)
{

	if((*fd=socket(AF_INET,SOCK_DGRAM,0)) < 0)
	{
		perror("Thread creation: " );
		return 0;
	}
	else
		return -1;
}


int main()
{
	/*Create client*/
	int fd;
	CreateSocket(&fd);

	struct sockaddr_in clientAddr;
	 /* bind to an arbitrary return address */
	/* because this is the client side, we don't care about the address */
	/* since no application will initiate communication here - it will */
	/* just send responses */ /* INADDR_ANY is the IP address and 0 is the socket */
	/* htonl converts a long integer (e.g. address) to a network representation */
	/* htons converts a short integer (e.g. port) to a network representation */
	memset((char*)&clientAddr,0,sizeof(clientAddr));
	clientAddr.sin_family = AF_INET;
	clientAddr.sin_port = htons(0); //system picks port number
	clientAddr.sin_addr.s_addr = htonl(INADDR_ANY); //system picks IP addr

	if(bind(fd,(struct sockaddr *)&clientAddr,sizeof(clientAddr)))
	{
		perror("Bind socket: ");
		return -1;
	}
	/*END Create client*/


	/*Create Server*/

	/*END Create Server*/


//	/*Find IP address when host name is known*/
//	struct hostent *hp;
//	char *host = "google.com";
//	int i;
//	hp = gethostbyname(host);
//	if (!hp)
//	{
//		fprintf(stderr, "could not obtain address of %s\n", host);
//		return 0;
//	}
//	for (i=0; hp->h_addr_list[i] != 0; i++)
//		paddr((unsigned char*) hp->h_addr_list[i]);
//	/*END Find IP address when host name is known*/


	struct hostent *hp; //host info
	struct sockaddr_in serverAddr; //server address info
	char *my_msg="I am Client...Cunt...bag";

	/*fill server address*/
	memset((char*)&serverAddr,0,sizeof(serverAddr));
	serverAddr.sin_family=AF_INET;
	serverAddr.sin_port=htons(PORT);

	/*Find server address when hostname is known*/
	hp=gethostbyname((char*)HOST);
	if (!hp)
	{
		fprintf(stderr, "could not find the IP to host %s\n", (char*)HOST);
		return -1;
	}
	printf("dslfkjhsdf");
	/*put host IP into the server address structure serverAddr*/
	memcpy((void*)&serverAddr.sin_addr,hp->h_addr_list[0],hp->h_length);

//	//assign ip (the retarded way)
//	hp->h_addr_list[0]=7;
//	hp->h_addr_list[1]=8;
//	hp->h_addr_list[2]=9;
//	hp->h_addr_list[3]=1;
//	hp->h_addr_list[4]=4;
//	hp->h_addr_list[5]=8;
//	hp->h_addr_list[6]=1;
//	hp->h_addr_list[7]=8;
//	hp->h_addr_list[8]=3;
	//the smarter way
//	inet_pton("78.91.48.183",&serverAddr.sin_addr);
	int i;
	for (i=0; hp->h_addr_list[i] != 0; i++)
	{
		printf("dslfkjhsdf");
		paddr((unsigned char*) hp->h_addr_list[i]);
	}
	printf("dslfkjhsdf");
	/*send msg to server*/
	if(sendto(fd,my_msg,strlen(my_msg),0,(struct sockaddr*)&serverAddr,sizeof(serverAddr)) < 0)
	{
		perror("msg send to server successful");
		return -1;
	}

	return 0;
}
