//============================================================================
// Name        : main.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

//extern "C"
//{
//	#include"elev.h"
//}
#pragma once

#include "Control.h"
#include "State.h"

#include "ace/Log_Msg.h"
#include <iostream>


void listener(int child_tid);
void primary_service(int);
void new_primary_service(int);

int main()
{
	ACE_DEBUG((LM_DEBUG,
					   "in main\n"));

	//listener(0);
	new_primary_service(0);



	//connect signals to slots
//	signal(SIG_INTERVAL_TIMER,signal_int_timer_test);
//	signal(SIG_ONESHOT_TIMER,signal_oneshot_timer_test);

	std::stringstream ss;
	elevator::State test;
	test.do_serialize(ss,test);
	std::cout<<"data in binary form: "<<ss.str()<<"\n";

	test.do_deserialize(ss,test);
	std::cout<<"data in converted back to normal form now?????\n";

	elevator::Control ctrl(elevator::tag_elevator_type::SIMULATION,ss);
//	elevator::Control ctrl(elevator::COMEDI,ss);


	//Wait for all the tasks to exit.
	ACE_Thread_Manager::instance()->wait();

	return 0;
}

void new_primary_service(int count)
{
	pid_t pid=fork();//vfork(); //create child process //should spawn instead...

	if (pid==0)
		primary_service(count); //child
	else if (pid>0)
		listener(pid);//parent
	else
		ACE_ERROR((LM_WARNING, "failed creating child(primary_service) process\n"));
}

void primary_service(int count)
{
	ACE_DEBUG((LM_DEBUG, "PRIMARY_SERVICE IS ALIVE\n"));
	IPC_Client_Unicast::Client udp("localhost:42000");

	while(true)
	{
		udp.send_data("123456789012345678901324567");//std::to_string(count+1));//"ALIVE");
		std::this_thread::sleep_for(std::chrono::milliseconds(100));
		std::cout<<count<<endl;
		count++;
	}
}

void listener(int child_pid)
{
	int fake_primary_fail=0;
	int count=0;
	ACE_DEBUG((LM_DEBUG, "LISTENER IS ALIVE\n"));
	IPC_Server::Server listener(42000);
	unsigned int miss_rate_second=0;
	unsigned int miss=0;
	unsigned int miss_check_counter=0;


	/*check whether primary is alive*/
	while(true)
	{
		if (!(listener.accept_data()))// && listener.get_data()=="$ALIVEâ‚¬"))
			miss++;

		count=atoi(listener.get_data().c_str());

	}

	if (child_pid!=0)
	{
		/*Burn,rape and kill primary_service (child process); it's not responding */
		kill(child_pid,SIGKILL);
		/*Wait for primary_service (child process to terminate)*/
		waitpid(child_pid,NULL,0);
	}
	new_primary_service(count);//get the backup rolling as new primary and init it with the last known counter status

}

