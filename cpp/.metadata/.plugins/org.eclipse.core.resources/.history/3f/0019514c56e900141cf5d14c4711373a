/*
 * Elevator.cpp
 *
 *  Created on: Apr 22, 2015
 *      Author: bengteh
 */

#include "Control.h"
#include "Driver.h"
#include "Elevator.h"


#include "ace/Log_Msg.h"

namespace Elevator
{
	Elevator::Elevator(Control * ctrl_handle)// : test_(button_type_t::BUTTON_CALL_DOWN)
	{
		ACE_DEBUG((LM_DEBUG,
						   "in elevator constructor\n"));

		//handle elevator IO using the signal/slot principle (inspired by Qt's implementation)
		ctrl_signals_= new Control_Signals;

		ctrl_signals_->signal_button_press.connect(ctrl_handle,&Control::slot_button_press);
		ctrl_signals_->signal_button_press.emit(button_type_t::BUTTON_CALL_UP);

		ctrl_signals_->signal_floor_prox.connect(ctrl_handle,&Control::slot_floor_prox);
		ctrl_signals_->signal_floor_prox.emit(1);

	}
	Elevator::~Elevator(void){delete ctrl_signals_;}

	int Elevator::open(void*)
	{
		ACE_DEBUG((LM_DEBUG,
				            "(%t) Active Elevator Object opened \n"));

		//activate object with a thread in it
		activate();
		return 0;
	}

	int Elevator::close(u_long)
	{
		ACE_DEBUG((LM_DEBUG, "(%t) Active Elevator Object is being closed down \n"));
		return 0;
	}

	int Elevator::svc(void)
	{
		//service the sensor/switch IO (this runs in it's own thread)



		return 0;
	}

	void Elevator::poll_sensor_status()
	{

	}

}

