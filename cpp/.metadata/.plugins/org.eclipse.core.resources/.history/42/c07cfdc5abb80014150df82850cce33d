/*
 * elevator_driver.h
 *
 *	File based on elev.h
 *
 *  Created on: Feb 19, 2015
 *      Author: bengteh
 */

#ifndef ELEVATOR_DRIVER_H_
#define ELEVATOR_DRIVER_H_

//#include <tuple>
#include <limits>

extern "C"
{
	#include "io.h"
}

namespace Elevator
{
	enum class Button_t : int {CALL_UP=0,CALL_DOWN=1,GOTO_FLOOR=2};
	enum class Direction_t : int {DOWN=-1,STOP=0,UP=1};
	typedef enum tag_lamp_type {
	    BUTTON_CALL_UP = 0,
	    BUTTON_CALL_DOWN = 1,
	    BUTTON_COMMAND = 2
	} button_type_t;
	typedef enum tag_motor_direction {
	    DIRN_DOWN = -1,
	    DIRN_STOP = 0,
	    DIRN_UP = 1
	} motor_direction_t;

	struct Button
	{
		public:
			Button()
			{
				this->button_type_=Button_t::CALL_UP;
				this->floor_=std::numeric_limits<int>::min();
			}
			Button(Button_t button_type, int floor)
			{
				this->button_type_=button_type;
				this->floor_=floor;
			}

			int get_floor() const {return this->floor_;}
			Button_t get_button_type() const {return this->button_type_;}

		private:
			int floor_;
			Button_t button_type_;
	};

	class Driver
	{
		public:
			Driver();
			Driver(int min_floor, int max_floor);
			~Driver();

		    int get_min_floor() const {return this->min_floor_;}
		    int get_max_floor() const {return this->max_floor_;}

		    /**
			  Initialize elevator.
			  @return Non-zero on success, 0 on failure.
			*/
			int init(ElevatorType session);

			/**
			  Sets the motor direction of the elevator.
			  @param dirn New direction of the elevator.
			*/
			void set_motor_direction(motor_direction_t dirn);



			/**
			  Turn door-open lamp on or off.
			  @param value Non-zero value turns lamp on, 0 turns lamp off.
			*/
			void set_door_open_lamp(int value);



			/**
			  Get signal from obstruction switch.
			  @return 1 if obstruction is enabled. 0 if not.
			*/
			int get_obstruction_signal(void);



			/**
			  Get signal from stop button.
			  @return 1 if stop button is pushed, 0 if not.
			*/
			int get_stop_signal(void);



			/**
			  Turn stop lamp on or off.
			  @param value Non-zero value turns lamp on, 0 turns lamp off.
			*/
			void set_stop_lamp(int value);



			/**
			  Get floor sensor signal.
			  @return -1 if elevator is not on a floor. 0-3 if elevator is on floor. 0 is
			    ground floor, 3 is top floor.
			*/
			int get_floor_sensor_signal(void);



			/**
			  Set floor indicator lamp for a given floor.
			  @param floor Which floor lamp to turn on. Other floor lamps are turned off.
			*/
			void set_floor_indicator(int floor);


			/**
			  Gets a button signal.
			  @param button Which button type to check. Can be BUTTON_CALL_UP,
			    BUTTON_CALL_DOWN or BUTTON_COMMAND (button "inside the elevator).
			  @param floor Which floor to check button. Must be 0-3.
			  @return 0 if button is not pushed. 1 if button is pushed.
			*/
			int get_button_signal(button_type_t button, int floor);



			/**
			  Set a button lamp.
			  @param lamp Which type of lamp to set. Can be BUTTON_CALL_UP,
			    BUTTON_CALL_DOWN or BUTTON_COMMAND (button "inside" the elevator).
			  @param floor Floor of lamp to set. Must be 0-3
			  @param value Non-zero value turns lamp on, 0 turns lamp off.
			*/
			void set_button_lamp(button_type_t button, int floor, int value);


		private:
		    const int min_floor_;
		    const int max_floor_;

	};

}

#endif /* ELEVATOR_DRIVER_H_ */
