//============================================================================
// Name        : IPC_Server.cpp
// Author      :
// Version     :
// Copyright   : Your copyright notice--> If you wanna copy this: you don't recognize shit when you see it...
// Description : ACE IPC wrapper
//============================================================================

#ifndef IPC_SERVER_CPP_
#define IPC_SERVER_CPP_

#include "IPC_Server.h"


#include <iostream>

#include <cstring>

namespace IPC_Server
{
	Server::Server(const unsigned short local_port)
		:local_addr_(local_port),socket_(local_addr_),dgram_byte_size_(32)
	{
		this->data_buff_=new char[4096];/*Set 4096=default max data buffer size*/

	}

	Server::Server(const unsigned short local_port,unsigned short data_buffer_size,const unsigned short dgram_byte_size)
		:local_addr_(local_port),socket_(local_addr_),dgram_byte_size_(dgram_byte_size)
	{
		this->data_buff_=new char[data_buffer_size];

	}

	Server::~Server()
	{
		delete [] this->data_buff_;
		this->socket_.close();
	}

	std::string Server::get_data()
	{
		std::string no_integrity_markers=this->data_string_;
		no_integrity_markers.erase(no_integrity_markers.begin());
		no_integrity_markers.erase(this->found_msg_end_-1);

		return no_integrity_markers;
	}

	int Server::accept_data()
	{
		ssize_t bytes_received=0;

		//std::memset(this->data_buff_,0,ACE_OS::strlen(this->data_buff_));//Clean data buffer

		//std::cout<<"...listening on host: "<<this->remote_addr_.get_host_addr()<<std::endl;
		ACE_Time_Value timeout(1,0);//500000);//TODO: REMOVE.. only for ex6
		if((bytes_received = this->socket_.recv(this->data_buff_,this->dgram_byte_size_,this->remote_addr_))!=-1)//!=-1)
		{
			data_buff_[bytes_received]=0;
			ACE_DEBUG((LM_DEBUG, "Server received %d bytes from client %s; DATA_MSG was: %s \n",
					bytes_received, this->remote_addr_.get_host_addr(), this->data_buff_));

			#if ACE_NDEBUG == 0
				ACE_OS::sleep(1);
			#endif

			data_string_.assign(this->data_buff_,ACE_OS::strlen (this->data_buff_));

//			this->found_msg_start_=data_string_.find(this->data_msg_start_);
//			this->found_msg_end_=data_string_.find(this->data_msg_end_);
//			if ((this->found_msg_start_>-1) && (this->found_msg_end_>-1))//is message valid?
//			{
				ACE_DEBUG((LM_DEBUG,"Server got a complete message!\n"));
				if(this->send_data()==-1)//send ack!
					return 1;//break;
//			}
		}
		else
			return -1;
	}

	int Server::send_data()
	{
		ACE_DEBUG((LM_DEBUG,"Preparing to send reply to client %s:%d\n",
					this->remote_addr_.get_host_addr(),this->remote_addr_.get_port_number()));

		if(this->socket_.send(this->data_buff_, ACE_OS::strlen(data_buff_)+1,this->remote_addr_)==-1)
		{
			ACE_ERROR_RETURN ((LM_ERROR,
							   "%p\n",
							   "send"),
							  -1);
		}
		else
		{
			ACE_DEBUG((LM_DEBUG,"Server succ sent ack to client!\n"));
			return 0;
		}
	}
}
#endif /* IPC_SERVER_CPP_ */
