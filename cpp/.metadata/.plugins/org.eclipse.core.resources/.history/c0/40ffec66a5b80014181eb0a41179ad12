/*
 * elevator_driver.cpp
 *
 *  Created on: Feb 19, 2015
 *      Author: bengteh
 */

#include <array>
#include <assert.h>
#include "elevator_driver.h"
#include "channels.h"

namespace Elevator
{
	//TODO IF TIME: get rid of arrays as it hinders portability
	static const int N_FLOORS = 4;
	static const int N_BUTTONS = 3;

	static const std::array< std::array< int, N_BUTTONS >, N_FLOORS > lampChannelMatrix
	{ {
		{ { LIGHT_UP1, LIGHT_DOWN1, LIGHT_COMMAND1 } },
		{ { LIGHT_UP2, LIGHT_DOWN2, LIGHT_COMMAND2 } },
		{ { LIGHT_UP3, LIGHT_DOWN3, LIGHT_COMMAND3 } },
		{ { LIGHT_UP4, LIGHT_DOWN4, LIGHT_COMMAND4 } },
	} };

	static const std::array< std::array< int, N_BUTTONS >, N_FLOORS > buttonChannelMatrix
	{ {
	    {BUTTON_UP1, BUTTON_DOWN1, BUTTON_COMMAND1},
	    {BUTTON_UP2, BUTTON_DOWN2, BUTTON_COMMAND2},
	    {BUTTON_UP3, BUTTON_DOWN3, BUTTON_COMMAND3},
	    {BUTTON_UP4, BUTTON_DOWN4, BUTTON_COMMAND4},
	} };
	//TODO /*END*/

	Driver::Driver()
		:min_floor_(1), max_floor_(4)
	{
		//stop_elevator();
	}
	Driver::Driver(int min_floor, int max_floor)
		:min_floor_(min_floor), max_floor_(max_floor)
	{
		//stop_elevator();
	}
	Driver::~Driver()
	{
		//stop_elevator();
	}

	int Driver::init(ElevatorType session)
	{
		 // Init hardware
		    if (!io_init(session))
		        return 0;

		    // Zero all floor button lamps
		    for (int i = 0; i < N_FLOORS; ++i)
		    {
		        if (i != 0)
		            set_button_lamp(Button_t::CALL_DOWN, i, 0);

		        if (i != N_FLOORS - 1)
		            set_button_lamp(Button_t::CALL_UP, i, 0);

		        set_button_lamp(Button_t::GOTO_FLOOR, i, 0);
		    }

		    // Clear stop lamp, door open lamp, and set floor indicator to ground floor.
		    elev_set_stop_lamp(0);
		    elev_set_door_open_lamp(0);
		    elev_set_floor_indicator(0);

		    // Return success.
		    return 1;
	}
	void Driver::set_button_lamp(elev_button_type_t button, int floor, int value)
	{
	    assert(floor >= 0);
	    assert(floor < N_FLOORS);
	    assert(!(button == Button_t::CALL_UP && floor == N_FLOORS - 1));
	    assert(!(button == Button_t::CALL_DOWN && floor == 0));
	    assert(button == Button_t::CALL_UP || button == Button_t::CALL_DOWN || button == Button_t::GOTO_FLOOR);

	    if (value)
	        io_set_bit(lamp_channel_matrix[floor][button]);
	    else
	        io_clear_bit(lamp_channel_matrix[floor][button]);

	}
}
