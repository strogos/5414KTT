//============================================================================
// Name        : main.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

//extern "C"
//{
//	#include"elev.h"
//}
#pragma once

#include "Control.h"
#include "Driver.h"
#include "IPC_Client.h"
#include "IPC_Server.h"
#include "State.h"


#include "ace/Log_Msg.h"
#include <iostream>


void listener(int child_tid);
void primary_service(int);
void new_primary_service(int);

int main()
{
	ACE_DEBUG((LM_DEBUG,
					   "in main\n"));

	new_primary_service(0);

	//Wait for all the tasks to exit.
	ACE_Thread_Manager::instance()->wait();
	return 0;
}

void new_primary_service(int count)
{
	pid_t pid=fork();//vfork(); //create child process

	if (pid==0)
		primary_service(count); //child
	else if (pid>0)
		listener(pid);//parent
	else
		ACE_ERROR((LM_WARNING, "failed creating child(primary_service) process\n"));
}

void primary_service(int count)
{
	ACE_DEBUG((LM_DEBUG, "PRIMARY_SERVICE IS ALIVE\n"));
	IPC_Client_Unicast::Client udp("localhost:42000");

	while(true)
	{
		udp.send_data("123456789012345678901324567");//std::to_string(count+1));//"ALIVE");
		std::this_thread::sleep_for(std::chrono::milliseconds(100));

		count++;
	}
}

void listener(int child_pid)
{
	int count=0;
	ACE_DEBUG((LM_DEBUG, "LISTENER IS ALIVE\n"));
	IPC_Server::Server listener(42024);
	unsigned int miss=0;



	/*check whether primary is alive*/
	while(true)
	{
		if (!(listener.accept_data()))// && listener.get_data()=="$ALIVEâ‚¬"))
			miss++;

		count=atoi(listener.get_data().c_str());

	}

	if (child_pid!=0)
	{
		/*Burn,loot, rape and kill primary_service (child process); it's not responding */
		kill(child_pid,SIGKILL);
		/*Wait for primary_service (child process to terminate)*/
		waitpid(child_pid,NULL,0);
	}
	new_primary_service(count);//get the backup rolling as new
								//primary and init it with the last known counter status
}

