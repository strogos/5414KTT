/*
 * main.cpp
 *
 *  Created on: Jan 29, 2015
 *      Author: bengteh
 */


#include "ace/OS.h"
#include "ace/Log_Msg.h"
#include "ace/INET_Addr.h"
#include "ace/SOCK_Dgram_Bcast.h"
#include "ace/SOCK_Dgram.h"

#include <iostream>
using namespace std;

int send_broadcast(const unsigned short port,const char *msg_to_send)
{
	ACE_INET_Addr my_addr(static_cast<unsigned short>(10101));
	ACE_SOCK_Dgram_Bcast udp(my_addr);
	ssize_t sent=udp.send((const char*)msg_to_send,ACE_OS_String::strlen(msg_to_send)+1,port);
	udp.close();
	if(sent==-1)
	{
		ACE_ERROR_RETURN((LM_ERROR,
									ACE_TEXT("%p\n"),
									ACE_TEXT("send")),-1);
	}
	return 0;
}

int send_unicast(const char *address_and_port,const char *msg_to_send)
{
	const ACE_INET_Addr addr(address_and_port);
	ACE_INET_Addr my_addr(static_cast<unsigned short>(10101));
	ACE_SOCK_Dgram udp(my_addr);
	ssize_t sent=udp.send((const char*)msg_to_send,ACE_OS_String::strlen(msg_to_send)+1,addr);
	udp.close();
		if(sent==-1)
		{
			ACE_ERROR_RETURN((LM_ERROR,
										ACE_TEXT("%p\n"),
										ACE_TEXT("send")),-1);
		}

	return -1;
}

int listen (const string port)
{//USE COD?? see chapter for udp(IPC)

	//ACE_TCHAR peer_name[MAXHOSTNAMELEN];
	ACE_INET_Addr myAddr_(static_cast<unsigned short>(10101));
	ACE_INET_Addr remAddr_(port.c_str());
	ACE_SOCK_Dgram udp_(myAddr_);

	char dataBuffer[4096];
	ssize_t bytes_received;

	cout<<"...listening on host: "<<remAddr_.get_host_addr()<<endl;
	while((bytes_received = udp_.recv(dataBuffer,sizeof(dataBuffer), remAddr_)) != -1)
	{
		dataBuffer[bytes_received]=0;
		ACE_DEBUG((LM_DEBUG, "Data received from remote %s was %s \n"
						,remAddr_.get_host_name(), dataBuffer));
		cout<<"remote address ("<<remAddr_.get_host_name()<<") said: "<<dataBuffer<<endl;
		ACE_OS::sleep(1);
		if(send_unicast(remAddr_.get_host_addr(),"Thank you!\n")==-1)
			break;

	}
	return -1;
}


int ACE_TMAIN (int argc, ACE_TCHAR *argv[])
{
	//send_broadcast(43210,"I hate myself");
	send_unicast("129.241.223.189:20001","suckie dickie");
	listen("20001");
	return 0;
}
