/*
 * Timer.h
 *
 *  Created on: Apr 23, 2015
 *      Author: bengteh
 */

#ifndef TIMER_H_
#define TIMER_H_

#include "ace/Task.h"
#include "ace/Timer_Queue.h"
#include "ace/Reactor.h"

#include <atomic>
#include  <memory>

class Timer : public ACE_Event_Handler
			  ////////public ACE_Task<ACE_MT_SYNCH>
{
public:
	Timer(long time_out,ACE_Reactor * reac);
	virtual ~Timer();
	Timer(Timer&& rhs); // move constructor
	Timer& operator=(Timer&& rhs); // move assignment


	/*Implement the ACE specific service init/termination methods*/
	int open(void*);
	int close (u_long);
	int svc(void);

	virtual int handle_timeout (const ACE_Time_Value &tv, //Method which is called back
								const void *arg);		  //by the Reactor when timeout occurs.

	/*FUNCTIONS*/
	int get_id();
	bool is_done();
	void cancel_timer(int timer_id);

	private:

		/*if we want to copy an object to a new object when using a unique_ptr we must do the following*/
		Timer(const Timer&);
		Timer& operator=(const Timer&);

		class Handler;
		std::unique_ptr<Handler> handler_;
		//std::shared_ptr<Handler> handler_;

		std::atomic<bool> done_;
		ACE_Reactor *reactor_=nullptr;
		int timer_id_;

};



#endif /* TIMER_H_ */
