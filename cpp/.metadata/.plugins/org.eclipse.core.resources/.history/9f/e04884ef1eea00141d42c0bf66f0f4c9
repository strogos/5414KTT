/*
 * Timer.h
 *
 *  Created on: Apr 23, 2015
 *      Author: bengteh
 */

#ifndef TIMER_H_
#define TIMER_H_

#include "ace/Task.h"

#include  <memory>

class Timer : public ACE_Task<ACE_MT_SYNCH>
{
public:
	Timer(long time_out);//,ACE_Reactor * reac);
	virtual ~Timer();
	Timer(Timer&& rhs); // move constructor
	Timer& operator=(Timer&& rhs); // move assignment


	/*Implement the ACE specific service init/termination methods*/
	int open(void*);
	int close (u_long);
	int svc(void);

	/*FUNCTIONS*/
	int get_id();
	bool is_done();
	void cancel_timer(int timer_id);

	private:
		/*if we want to copy an object to a new object when using a unique_ptr we must do the following*/
		Timer(const Timer&);
		Timer& operator=(const Timer&);

		class Handler;

		std::unique_ptr<Handler> handler_;
		//std::shared_ptr<Handler> handler_;
		long timeout_=0;
};

#endif /* TIMER_H_ */
