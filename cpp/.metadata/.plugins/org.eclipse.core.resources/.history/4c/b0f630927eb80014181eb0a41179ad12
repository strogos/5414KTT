//============================================================================
// Name        : ICP_Client.h
// Author      :
// Version     :
// Copyright   : Your copyright notice
// Description : ACE IPC wrapper
//============================================================================
#ifndef IPC_CLIENT_H_
#define IPC_CLIENT_H_



#ifndef ACE_NDEBUG
#define ACE_NDEBUG 1
#endif
#ifndef ACE_NLOGGING
#define ACE_NLOGGING 1
#endif



#include "ace/Log_Msg.h"
#include "ace/SOCK_Dgram.h"
#include "ace/SOCK_Dgram_Bcast.h"
#include "ace/INET_Addr.h"

#include <iostream>
#include <string>

namespace IPC_Client_Unicast
{
	class Client_Impl;
	class Client //: public ACE_Event_Handler
	{
		public:
			Client(const char * remote_host_and_port);
			Client (const char * remote_host_and_port, const unsigned short data_buffer_size,const unsigned short dgram_byte_size);
			//virtual ~Client();
			~Client();

			int send_data(std::string msg);


		private:
			class Client_Impl* pimpl_;// opaque pointer to forward-declared class

		};
	struct Client_Impl
	{
		ACE_INET_Addr remote_addr_;
		ACE_INET_Addr local_addr_;
		ACE_SOCK_Dgram socket_;
		char *data_buff_;
		const unsigned short dgram_byte_size_;
		const std::string data_msg_end_="€";
		const std::string data_msg_start_="$";
		int found_msg_end_=0;
		int found_msg_start_=0;

		int accept_data_(const std::string msg_sent);
	};
}

namespace IPC_Client_Broadcast
{
	class Client //: public ACE_Event_Handler
	{
		public:
			Client(const unsigned short remote_port);
			Client (const unsigned short remote_port, const unsigned short data_buffer_size, const unsigned short dgram_byte_size);
			//virtual ~Client();
			~Client();

			int send_data(std::string msg);


		private:
			ACE_INET_Addr remote_addr_;
			ACE_INET_Addr local_addr_;
			ACE_SOCK_Dgram_Bcast socket_;
			char *data_buff_;
			const unsigned short dgram_byte_size_;
			const unsigned short remote_port_;
			const std::string data_msg_end_="€";
			const std::string data_msg_start_="$";
			int found_msg_end_=0;
			int found_msg_start_=0;

			int accept_data_(const std::string msg_sent);
		};
}

#endif /* IPC_CLIENT_H_ */
