//============================================================================
// Name       : main.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include "IPC_Server.h"
#include "IPC_Client.h"

//#include <pthread.h>
#include <thread>
#include <future>//TODO:use to get exit code from thread
#include <signal.h>
#include <memory>
#include <vector>
#include <iostream>
using namespace std;

void  thread_worker1(int tid)
{
		IPC_Server::Server srv(42000);
		srv.accept_data();
		srv.~Server();
}

void  thread_worker2(int tid)
{
		IPC_Client_Unicast::Client client("localhost:42000");
		client.send_data("0123456789");
		client.~Client();
}

int thread_do_join(std::thread& t)
{
    t.join();

    return 1;
}

int thread_join_all(std::vector<std::thread>& my_threads)
{
    std::for_each(my_threads.begin(),my_threads.end(),thread_do_join);

    //	/*Join the threads with the main thread*/
    //	for(auto &thread : my_threads)
    //	{
    //		thread.join();
    //	}

    return 1;
}

int main(int argc, char* argv[])
{
	//const unsigned short nr_threads=2;
	std::vector<thread> my_threads;

	/*Launch a group of threads*/
	my_threads.push_back(std::thread(thread_worker1,0));
	my_threads.push_back(std::thread(thread_worker2,1));

	/*Synchronize threads*/
	if(!thread_join_all(my_threads))
		std::cout<<"error joining threads!\n";



//	pthread_t thread1;
//	pthread_t thread2;
//	pthread_create(&thread1,NULL,thread_worker1,NULL);
//	pthread_create(&thread2,NULL,thread_worker2,NULL);
//	/* wait for the second thread to finish */
//	if(pthread_join(thread1, NULL) && pthread_join(thread2, NULL))
//	{
//		cout<<"Error joining thread\n";
//		return -1;
//	}



	return 0;
}
