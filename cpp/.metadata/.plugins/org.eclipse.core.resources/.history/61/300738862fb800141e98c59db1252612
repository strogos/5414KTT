//============================================================================
// Name       : main.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================


#define ACE_NDEBUG 1
//#define ACE_NLOGGING 0


#include "IPC_Server.h"
#include "IPC_Client.h"

#include <unistd.h>
#include <sys/types.h>

//#include <pthread.h> //Fuck this; will use c+11(boost) threads..
#include <thread>
#include <chrono>//thread sleep
#include <future>//TODO:channels between threads (shared state)->promise = "input from thread"; future = "output from thread"; Can also just use std::asynch instead
#include <vector>
#include <signal.h>
#include <memory>
#include <string>

#include "ace/Log_Msg.h"

#include <iostream>
using namespace std;

void  thread_worker1(int tid)
{
		IPC_Server::Server srv(42000);
		srv.accept_data();
		srv.~Server();
}

void  thread_worker2(int tid)
{
	IPC_Client_Unicast::Client client("localhost:42000");
	while(1)
	{

		client.send_data("ALIVE");
	}
		client.~Client();
}

int thread_do_join(std::thread& t)
{
    t.join();

    return 1;
}

int thread_join_all(std::vector<std::thread>& my_threads)
{
    std::for_each(my_threads.begin(),my_threads.end(),thread_do_join);

    //	/*Join the threads with the main thread*/
    //	for(auto &thread : my_threads)
    //	{
    //		thread.join();
    //	}

    return 1;
}

void listener(int child_tid);
void primary_service(int);
//void backup_service(int);
void new_primary_service(int);

int main(int argc, char* argv[])
{
	/*using threads (NOT IMPLEMENTED)*/
//	const unsigned short nr_threads=2;
//	std::vector<thread> my_threads;

//	/*Launch a group of threads*/
//	//my_threads.push_back(std::thread(thread_worker1,0));
//	my_threads.push_back(std::thread(listener,0));
//	my_threads.push_back(std::thread(thread_worker2,1));
//
//
//	/*Synchronize threads*/
//	if(!thread_join_all(my_threads))
//		std::cout<<"error joining threads!\n";

	/*using processes instead of threads*/
	//listener(0);
	new_primary_service(0);
	return 0;
}

void new_primary_service(int count)
{
	pid_t pid=fork();//vfork(); //create child process //should spawn instead...

	if (pid==0)
		primary_service(count); //child
	else if (pid>0)
		listener(pid);//parent
	else
		ACE_ERROR((LM_WARNING, "failed creating child(primary_service) process\n"));
}

void primary_service(int count)
{
	ACE_DEBUG((LM_DEBUG, "PRIMARY_SERVICE IS ALIVE\n"));
	IPC_Client_Unicast::Client udp("localhost:42000");

	while(true)
	{
		udp.send_data(std::to_string(count));//"ALIVE");
		std::this_thread::sleep_for(std::chrono::milliseconds(500));
		count++;
		std::cout<<count<<endl;
	}

	udp.~Client();
}

void listener(int child_pid)
{
	int fake_primary_fail=0;
	int count=0;
	ACE_DEBUG((LM_DEBUG, "LISTENER IS ALIVE\n"));
	IPC_Server::Server listener(42000);
	unsigned int miss_rate_second=0;
	unsigned int miss=0;
	unsigned int miss_check_counter=0;


	/*wait to launch primary*/
	while(true)
	{
		ACE_DEBUG((LM_DEBUG, "miss : %d\n",miss));
		/*check whether primary is alive*/
		if (!(listener.accept_data()))// && listener.get_data()=="$ALIVEâ‚¬"))
			miss++;

		count=atoi(listener.get_data().c_str());

		ACE_DEBUG((LM_DEBUG, "GET COUNTER DATA FROM PRIMARY:  %d\n",count));

		miss_check_counter++;
		ACE_DEBUG((LM_DEBUG, "miss check cnt: %d\n",miss_check_counter));
		//std::this_thread::sleep_for(std::chrono::milliseconds(500));
		/*Calculate hit_rate per second*/
		if (miss_check_counter==10)
		{
			//cout<<"miss check==10!\n";
			miss_rate_second=(miss*100)/(miss_check_counter);
			ACE_DEBUG((LM_DEBUG, "miss rate: %d\n",miss_rate_second));
			miss_check_counter=0;
		}

		if (fake_primary_fail>0)
			fake_primary_fail++;

		/*10% miss rate acceptable?*/
		if ((miss_rate_second>10) || (fake_primary_fail==5))
		{
			ACE_DEBUG((LM_DEBUG, "Miss rate: %d assume primary process is dead; spawn new..\n",miss_rate_second));
			listener.~Server();
			std::this_thread::sleep_for(std::chrono::milliseconds(1000));
			if (fake_primary_fail>0)
				fake_primary_fail=0;
			break;
		}
	}

	if (child_pid!=0)
	{
		/*Burn,rape and kill primary_service (child); it's not responding */
		kill(child_pid,SIGKILL);
		waitpid(child_pid,NULL,0);
	}
	new_primary_service(count+1);//get the backup rolling as new primary and init it with the last known counter status

}
