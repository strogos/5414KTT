/*
 * Timer.h
 *
 *  Created on: Apr 23, 2015
 *      Author: bengteh
 *
 *  Note: This is a timer which can be configured to signal (process-wide)
 *        on interrupt, one-shot or it can be configured to simply run and
 *        stop on client code request.
 *        FIY; because of time restrictions -> POSIX only for now
 *        and only one of each INTERVAL and ONESHOT timer running at a time
 *        as only two signals are implemented!!
 *
 *        The elevator simulator blocks the posix signals!
 *        How the hell are we supposed to test this crap when there's  never any
 *        available space in the lab...
 */

#ifndef TIMER_H_
#define TIMER_H_

#include "ace/Task.h"
#include "time.h"

#include  <memory>
#include <signal.h>

#define SIG_INTERVAL_TIMER 10 //SIGUSR1
#define SIG_ONESHOT_TIMER 12 //SIGUSR2



namespace elevator

enum class Timer_Type : int {ONE_SHOT=0,INTERVAL=1, RUNNING=2};{

	/*Fwd dec*/
	class Control;

	class Timer : public ACE_Task<ACE_MT_SYNCH>
	{
	public:
		Timer(Timer_Type tt);               						//start stop timer
		Timer(Timer_Type tt, long time_ms);    						//one-shot timer or interval timer
		Timer(Timer_Type tt, Control * ctrl_handler);  	//because of simulator
		Timer(Timer_Type tt, long time_ms, Control * ctrl_handler);  //because of simulator


		virtual ~Timer();
	//	Timer(Timer&& rhs); // move constructor
	//	Timer& operator=(Timer&& rhs); // move assignment


		/*Implement the ACE specific service init/termination methods*/
		int open(void*);
		int close (u_long);
		int svc(void);

		/*FUNCTIONS*/
		int get_id();
		long long get_ms_time();
		clock_time::msec get_start_time();
		bool is_running();
		void stop();

		private:
	//		/*if we want to copy an object to a new object when using a unique_ptr we must do the following*/
	//		Timer(const Timer&);
	//		Timer& operator=(const Timer&);

			class Handler;

			long time_ms_=0;
			Timer_Type timer_type_;
			Control *ctrl_handle_=nullptr;
			bool ctrl_in_scope_=false;
			Handler *handler_=nullptr;


	};
}
#endif /* TIMER_H_ */
