/*
 * Timer.h
 *
 *  Created on: Apr 23, 2015
 *      Author: bengteh
 */

#ifndef TIMER_H_
#define TIMER_H_

#include "ace/Task.h"
#include "ace/Timer_Queue.h"
#include "ace/Reactor.h"

#include <atomic>


class Timer : public ACE_Event_Handler,
			  public ACE_Task<ACE_MT_SYNCH>
{
public:
	Timer(int time_out);
	~Timer();

	/*Implement the ACE specific service init/termination methods*/
	int open(void*);
	int close (u_long);
	int svc(void);

	virtual int handle_timeout (const ACE_Time_Value &tv, //Method which is called back
								const void *arg);		  //by the Reactor when timeout occurs.

	/*FUNCTIONS*/
	int get_id();
	void cancel_timer(int timer_id);

	private:
		ACE_Reactor reactor_;
		int timer_id_;
		std::atomic<bool> done_=false;
};



#endif /* TIMER_H_ */
