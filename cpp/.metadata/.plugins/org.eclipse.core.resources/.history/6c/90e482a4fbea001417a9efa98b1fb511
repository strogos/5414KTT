/*
 * Control.cpp
 *
 *  Created on: Feb 11, 2015
 *      Author: bengteh
 *
 *      Note:
 *      This is an elevator control module.
 */

#include "Control.h"
#include "Driver.h"
#include "Elevator.h"

#include <unistd.h>//sleep
#include "ace/Log_Msg.h"
#include "ace/Auto_Ptr.h"

namespace elevator
{
	Control::Control(elevator_type session)
	       : servicing_(false), session_(session)
	{
		ACE_DEBUG((LM_DEBUG,
						   "in control constructor\n"));

		//handle elevator IO using the signal/slot principle (inspired by Qt's implementation)
		ctrl_signal_ = std::unique_ptr<Control_Signals>(new Control_Signals);
		ctrl_signal_->button_press.connect(this,&Control::slot_button_press);
		ctrl_signal_->floor_sensor.connect(this,&Control::slot_floor_sensor);
		ctrl_signal_->stop_task.connect(this,&Control::slot_exit_task);

		elevator_=std::unique_ptr<Elevator>(new Elevator(this));

		//start tasks (and their corresponding threads)
		this->open(0);
		elevator_->open(0);

	}

	Control::~Control()
	{
		// TODO Auto-generated destructor stub
	}

	int Control::open(void*)
	{
		ACE_DEBUG((LM_DEBUG,
							"(%t) Active Control Object opened \n"));
		//activate object with a thread in it
		//this->activate(THR_NEW_LWP | THR_SUSPENDED,1); //using a kernel thread
		activate();
		return 0;
	}

	int Control::close(u_long)
	{
		ACE_DEBUG((LM_DEBUG, "(%t) Active Control Object is being closed down \n"));
		return 0;
	}

	int Control::svc(void)
	{
		ACE_Thread_Manager *mgr = this->thr_mgr ();
		while (true)
		{


			std::unique_ptr<ACE_Method_Request>
			request (this->slot_queue_.dequeue ()); // Dequeue the next method object

			if (mgr->testcancel (mgr->thr_self ())) //check if thread manager wants to stop
				break;

			if (request->call () == -1)  // Invoke the method request (BLOCKING) .
				break;
			ACE_DEBUG((LM_DEBUG, "(%t) Control thread GOING DOWN\n"));
			if (servicing_)
			{
				ACE_DEBUG((LM_DEBUG, "(%t) Control thread IS servicing : %d\n",(int)servicing_));
				servicing_=false;
			}

			if (mgr->testcancel (mgr->thr_self ())) //check if thread manager wants to stop
				break;
		}
		ACE_DEBUG((LM_DEBUG, "(%t) Control thread GOING DOWN\n"));
		return 0; //service done; ACE_Task will call elevator::close() and close off
				  //any threads in this object
	}

	elevator_type Control::get_session() {return session_;}

	Control_Signals * Control::signal_subscribe(Control_Signals * subscribe)
	{

		//memory mgmt on all signaling to slots in control shall be done in the control task itself
		subscribe=ctrl_signal_.get();
		if (subscribe)
			return subscribe;
		else
		{
			ACE_ERROR((LM_EMERGENCY,"PANIC: control SIGNAL subscription FAIL!\n"));
			throw std::bad_alloc();
		}

	}

	class Control::On_Button_Press : public ACE_Method_Request
	{
		public:
			On_Button_Press(button_type_t button) : button_(button)
			{
				ACE_DEBUG((LM_DEBUG,"Button type press ENQUED %d\n",(int)button));
			}
			virtual int call (void)
			{
				ACE_DEBUG((LM_DEBUG,"Button type pressed %d\n",(int)button_));
				return 0;
			}
		private:
			button_type_t button_;
	};

	class Control::On_Floor_Sensor : public ACE_Method_Request
	{
		public:
			On_Floor_Sensor(int floor) : floor_(floor)
			{
				ACE_DEBUG((LM_DEBUG,"on floor sensor enqued %d\n", floor));
			}
			virtual int call (void)
			{
				ACE_DEBUG((LM_DEBUG,"Reached floor %d\n", floor_));
				return 0;
			}
		private:
			int floor_;
	};

	struct Exit_Method : public ACE_Method_Request
	{
		virtual int call (void) {return -1;}
	};

	void Control::slot_button_press(button_type_t button)
	{
		ACE_DEBUG((LM_DEBUG, "in slot for button press\n"));
		slot_queue_.enqueue (new On_Button_Press(button));
		servicing_=true;
	}

	void Control::slot_floor_sensor(int floor)
	{
		slot_queue_.enqueue (new On_Floor_Sensor(floor));
	}

	void Control::slot_exit_task(void*)
	{
		slot_queue_.enqueue(new Exit_Method);
	}
}
