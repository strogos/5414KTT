/*
 * elevator_driver.cpp
 *
 *  Created on: Feb 19, 2015
 *      Author: bengteh
 *
 *   About: Elevator control
 */

#include "channels.h"
#include "Driver.h"
extern "C" {#include "io.h"}

#include <assert.h>

namespace elevator
{
class Elevator;
	//TODO IF TIME: get rid of arrays as it hinders portability
	static const int N_FLOORS = 4;
	static const int N_BUTTONS = 3;

	static const int lamp_channel_matrix[N_FLOORS][N_BUTTONS] = {
		{LIGHT_UP1, LIGHT_DOWN1, LIGHT_COMMAND1},
		{LIGHT_UP2, LIGHT_DOWN2, LIGHT_COMMAND2},
		{LIGHT_UP3, LIGHT_DOWN3, LIGHT_COMMAND3},
		{LIGHT_UP4, LIGHT_DOWN4, LIGHT_COMMAND4},
	};

	static const int button_channel_matrix[N_FLOORS][N_BUTTONS] = {
		{BUTTON_UP1, BUTTON_DOWN1, BUTTON_COMMAND1},
		{BUTTON_UP2, BUTTON_DOWN2, BUTTON_COMMAND2},
		{BUTTON_UP3, BUTTON_DOWN3, BUTTON_COMMAND3},
		{BUTTON_UP4, BUTTON_DOWN4, BUTTON_COMMAND4},
	};
	//TODO /*END*/

	Driver::Driver()
		:min_floor_(1), max_floor_(4)
	{
		stop_elevator();
	}
	Driver::Driver(int min_floor, int max_floor)
		:min_floor_(min_floor), max_floor_(max_floor)
	{
		stop_elevator();
	}
	Driver::~Driver() {stop_elevator();}

	tag_motor_direction Driver::get_movement(){return direction_;}

	tag_motor_direction Driver::get_last_movement() {return last_direction_;}

	int Driver::init(elevator_type session)
	{
		/*because of io.c (c does not support type def. of enum) we must do:*/
		if (session==ET_comedi)
		{
			// Init hardware
			if (!io_init(ET_comedi))
				return 0;
		}
		else
		{
			// Init hardware
			if (!io_init(ET_simulation))
				return 0;
		}

	    // Zero all floor button lamps
	    for (int i = 0; i < N_FLOORS; ++i) {
	        if (i != 0)
	            set_button_lamp(BUTTON_CALL_DOWN, i, 0);

	        if (i != N_FLOORS - 1)
	        	set_button_lamp(BUTTON_CALL_UP, i, 0);

	        set_button_lamp(BUTTON_COMMAND, i, 0);
	    }

	    // Clear stop lamp, door open lamp, and set floor indicator to ground floor.
	    set_stop_lamp(0);
	    set_door_open_lamp(0);
	    set_floor_indicator(0);

	    // Return success.
	    return 1;
	}

	void Driver::stop_elevator()
	{
		io_write_analog(MOTOR, 0 );//stop
	}

	void Driver::set_motor_speed(int speed)
	{
		io_write_analog( MOTOR, 2048 + 4 * speed );
	}

	void Driver::set_motor_direction(motor_direction_t dirn)
	{
	    if (dirn == 0){
	        io_write_analog(MOTOR, 0);
	    } else if (dirn > 0) {
	        io_clear_bit(MOTORDIR);
	        io_write_analog(MOTOR, 2800);
	    } else if (dirn < 0) {
	        io_set_bit(MOTORDIR);
	        io_write_analog(MOTOR, 2800);
	    }
	}

	void Driver::set_door_open_lamp(int value)
	{
	    if (value)
	        io_set_bit(LIGHT_DOOR_OPEN);
	    else
	        io_clear_bit(LIGHT_DOOR_OPEN);
	}

	int Driver::get_obstruction_signal(void)
	{
	    return io_read_bit(OBSTRUCTION);
	}

	int Driver::get_stop_signal(void)
	{
	    return io_read_bit(STOP);
	}

	void Driver::set_stop_lamp(int value)
	{
	    if (value)
	        io_set_bit(LIGHT_STOP);
	    else
	        io_clear_bit(LIGHT_STOP);
	}

	int Driver::get_floor_sensor_signal(void)
	{
	    if (io_read_bit(SENSOR_FLOOR1))
	        return 0;
	    else if (io_read_bit(SENSOR_FLOOR2))
	        return 1;
	    else if (io_read_bit(SENSOR_FLOOR3))
	        return 2;
	    else if (io_read_bit(SENSOR_FLOOR4))
	        return 3;
	    else
	        return -1;
	}

	void Driver::set_floor_indicator(int floor)
	{
	    assert(floor >= 0);
	    assert(floor < N_FLOORS);

	    // Binary encoding. One light must always be on.
	    if (floor & 0x02)
	        io_set_bit(LIGHT_FLOOR_IND1);
	    else
	        io_clear_bit(LIGHT_FLOOR_IND1);

	    if (floor & 0x01)
	        io_set_bit(LIGHT_FLOOR_IND2);
	    else
	        io_clear_bit(LIGHT_FLOOR_IND2);
	}

	int Driver::get_button_signal(button_type_t button, int floor)
	{
	    assert(floor >= 0);
	    assert(floor < N_FLOORS);
	    assert(!(button == BUTTON_CALL_UP && floor == N_FLOORS - 1));
	    assert(!(button == BUTTON_CALL_DOWN && floor == 0));
	    assert(button == BUTTON_CALL_UP || button == BUTTON_CALL_DOWN || button == BUTTON_COMMAND);

	    if (io_read_bit(button_channel_matrix[floor][button]))
	        return 1;
	    else
	        return 0;
	}

	void Driver::set_button_lamp(button_type_t button, int floor, int value)
	{
	    assert(floor >= 0);
	    assert(floor < N_FLOORS);
	    assert(!(button == BUTTON_CALL_UP && floor == N_FLOORS - 1));
	    assert(!(button == BUTTON_CALL_DOWN && floor == 0));
	    assert(button == BUTTON_CALL_UP || button == BUTTON_CALL_DOWN || button == BUTTON_COMMAND);

	    if (value)
	        io_set_bit(lamp_channel_matrix[floor][button]);
	    else
	        io_clear_bit(lamp_channel_matrix[floor][button]);
	}

}
