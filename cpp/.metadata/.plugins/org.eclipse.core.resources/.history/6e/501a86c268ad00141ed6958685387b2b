/*
 * ICP_Client.cpp
 *
 *  Created on: Feb 5, 2015
 *      Author: sveigri
 */

#ifndef IPC_CLIENT_CPP_
#define IPC_CLIENT_CPP_

#include <iostream>
#include "IPC_Client.h"

namespace IPC_Client_Unicast
{
	Client::Client (const char * remote_host_and_port)
		:remote_addr_(remote_host_and_port),local_addr_((u_short)0),socket_(local_addr_),dgram_byte_size(32)
		{
			this->data_buff = new char[4096];
		}

	Client::Client (const char * remote_host_and_port, const unsigned short data_buffer_size, const unsigned short dgram_byte_size)
		:remote_addr_(remote_host_and_port),local_addr_((u_short)0),socket_(local_addr_),dgram_byte_size(dgram_byte_size)
	{
		this->data_buff = new char[data_buffer_size];
	}

	Client::~Client()
	{
		delete this->data_buff;
		socket_.close();
	}

	int Client::accept_data()
	{
		if(this->socket_.recv(this->data_buff,this->dgram_byte_size,this->remote_addr_)!=-1)
		{
			ACE_DEBUG((LM_DEBUG, "Data received from remote server %s : %s\n" ,
							this->remote_addr_.get_host_name(), this->data_buff));
			return -1;
		}
		else
			return 0;
	}

	int Client::send_data()
	{
		ACE_DEBUG((LM_DEBUG,"Preparing to send data to server %s:%d\n",
				this->remote_addr_.get_host_name(),this->remote_addr_.get_port_number()));
		ACE_OS::sprintf(this->data_buff,"Heil from client\n");

		while(this->socket_.send(this->data_buff,ACE_OS::strlen(this->data_buff),this->remote_addr_)!=-1)
		{
			ACE_OS::sleep(1);
			if(this->accept_data()==-1)
				break;
		}

		return -1;
	}
}

namespace IPC_Client_Broadcast
{
	Client::Client (const unsigned short remote_port)
		:remote_addr_(static_cast<unsigned short>(10101)),local_addr_((u_short)0),socket_(local_addr_),dgram_byte_size(32),remote_port(remote_port)
		{
			this->data_buff = new char[4096];
		}

	Client::Client (const unsigned short remote_port, const unsigned short data_buffer_size, const unsigned short dgram_byte_size)
		:remote_addr_(static_cast<unsigned short>(10101)),local_addr_((u_short)0),socket_(local_addr_),dgram_byte_size(dgram_byte_size),remote_port(remote_port)
	{
		this->data_buff = new char[data_buffer_size];
	}

	Client::~Client()
	{
		delete this->data_buff;
		socket_.close();
	}

	int Client::open_socket()
	{
		  if (this->socket_.open (local_addr_) == -1)
		    ACE_ERROR_RETURN ((LM_ERROR,
		                       "%p\n",
		                       "open"),
		                      0);
		  else
			  return 0;
	}

	int Client::accept_data()
	{
		ACE_Time_Value timeout (5, 0);

		if(this->socket_.recv(this->data_buff,sizeof(this->data_buff),this->remote_addr_,0,&timeout)!=-1)
		{
			ACE_DEBUG((LM_DEBUG, "Data received from remote server %s : %s\n" ,
							this->remote_addr_.get_host_name(), this->data_buff));
			return -0;
		}
		else
		{
			ACE_ERROR_RETURN ((LM_ERROR,
					                       "%p\n",
					                       "recv"),
					                      -1);
		}

	}

	int Client::send_data()
	{
		//this->open_socket();
		ACE_DEBUG((LM_DEBUG,"Preparing to broadcast data over port %hu\n",
				this->remote_port));

		ACE_OS::sprintf(this->data_buff,"Heil from client\n");

//		while(this->socket_.send(this->data_buff,ACE_OS::strlen(this->data_buff),this->remote_addr_)!=-1)
//		{
//			ACE_OS::sleep(1);
//			if(this->accept_data()==-1)
//				break;
//		}nc

		if (socket_.send (this->data_buff, ACE_OS::strlen (this->data_buff) + 1, this->remote_port) == -1)
		    ACE_ERROR_RETURN ((LM_ERROR,
		                       "%p\n",
		                       "send"),
		                      -1);
		this->accept_data();


		return -1;
	}
}
#endif /* ICP_CLIENT_CPP_ */
